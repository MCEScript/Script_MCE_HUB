python
class LuaTValuePrinter:
    def __init__(self, val):
        self.val = val
    def to_string(self):
        tt = self.val['tt']
        val = self.val['value']
        if tt == 0:
            return "{LUA_TNIL}"
        if tt == 1:
            return "{LUA_TBOOLEAN %s}" % "TRUE" if val['b'] != 0 else "FALSE"
        if tt == 2:
            return "{LUA_TLIGHTUSERDATA %s}" % val['p']
        if tt == 3:
            f = float(str(val['n']))
            return "{LUA_TNUMBER %s = %.15g}" % (val['p'], f)
        if tt == 4:
            ts = val['gc'].dereference()['ts']['tsv']
            charp = ts.address + 1
            clen = ts['len']
            lit = gdb.parse_and_eval("{char[%s]}%s" % (clen, charp))
            return "{LUA_TSTRING [%s] %s @ %s}" % (ts['len'], lit, charp)
        if tt == 5:
            return "{LUA_TTABLE <TODO> %s}" % val
        if tt == 6:
            closure = val['gc'].dereference()['cl']
            isC = closure['c']['isC']
            gdbint = gdb.Value(0).type
            if isC == 0:
                proto = closure['l']['p'].dereference()
                return "{LUA_TFUNCTION L%s-%s, %s upvs, %s args, %s maxstack}" % (
                    proto['linedefined'].cast(gdbint),
                    proto['lastlinedefined'].cast(gdbint),
                    proto['nups'].cast(gdbint),
                    proto['numparams'].cast(gdbint),
                    proto['maxstacksize'].cast(gdbint),
                )
            else:
                return "{LUA_TFUNCTION [C] %s}" % closure['c']['f']
        if tt == 7:
            return "{LUA_TUSERDATA <TODO> %s}" % val
        if tt == 8:
            return "{LUA_TTHREAD <TODO> %s}" % val
        #if tt == 10: #-- upval
        # wtf
        return "{TValue tt=%d ???}" % tt
def lua_tvalue(v):
    if str(v.type) == 'TValue':
        return LuaTValuePrinter(v)
gdb.pretty_printers = [lua_tvalue]
end

display *rb
display *ra
display L->base[12]
display L->base[11]
display L->base[10]
display L->base[9]
display L->base[8]
display L->base[7]
display L->base[6]
display L->base[5]
display L->base[4]
display L->base[3]
display L->base[2]
display L->base[1]
display L->base[0]
display L->base[-1]
display L->base[-2]
display L->base[-3]
display L->base[-4]
display (pc - L->ci.func->value.gc->cl.l.p->code)
display *L->ci.func

break lvm.c:409
commands
print "+++ OP_MOVE +++"
end
break lvm.c:413
commands
print "+++ OP_LOADK +++"
end
break lvm.c:430
commands
print "+++ OP_GETUPVAL +++"
end
break lvm.c:437
commands
print "+++ OP_GETGLOBAL +++"
end
break lvm.c:454
commands
print "+++ OP_SETUPVAL +++"
end
break lvm.c:476
commands
print "+++ OP_ADD +++"
end
break lvm.c:480
commands
print "+++ OP_SUB """
end
break lvm.c:539
commands
print "+++ OP_CONCAT"
end
break lvm.c:589
commands
print "+++ OP_CALL +++"
end
break lvm.c:644
commands
print "+++ OP_RETURN +++"
end
break lvm.c:655
commands
print "+++ OP_FORLOOP +++"
end
break lvm.c:741
commands
print "+++ OP_CLOSURE +++"
end
